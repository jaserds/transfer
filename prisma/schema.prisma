// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Country {
  id       String  @id @default(uuid())
  name     String
  imageUrl String?
  cities   City[]
}

model City {
  id        String  @id @default(uuid())
  name      String
  imageUrl  String?
  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  routes    Route[]
}

model Route {
  id              String                 @id @default(uuid())
  inRoute         String
  toRoute         String
  cityId          String
  popularRoute    Boolean?
  imageUrl        String
  city            City                   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  pointsGoogleMap Json
  description     String
  price           Float
  transferCars    TransferCarsOnRoutes[]
}

model TransferCars {
  id        String                 @id @default(uuid())
  name      String
  imageUrl  String
  cars      String
  qtyPerson Int
  qtyBags   Int
  price     Float
  routes    TransferCarsOnRoutes[]
}

model TransferCarsOnRoutes {
  routeId       String
  transferCarId String
  route         Route        @relation(fields: [routeId], references: [id], onDelete: Cascade)
  transferCar   TransferCars @relation(fields: [transferCarId], references: [id], onDelete: Cascade)

  @@id([routeId, transferCarId]) // Композитный ключ для связи
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          ROLE
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ROLE {
  ADMIN
  USER
}
