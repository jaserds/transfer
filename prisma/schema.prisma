// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Country {
  id                 String               @id @default(uuid())
  name               String
  imageUrl           String?
  cities             City[]
  CountryTranslation CountryTranslation[]
}

model CountryTranslation {
  id        String @id @default(uuid())
  countryId String
  locale    String // "en", "ru", "fr" и т. д.
  name      String

  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@unique([countryId, locale]) // Уникальная пара countryId + locale
}

model City {
  id              String            @id @default(uuid())
  name            String
  imageUrl        String?
  countryId       String
  country         Country           @relation(fields: [countryId], references: [id], onDelete: Cascade)
  routes          Route[]
  CityTranslation CityTranslation[]
}

model CityTranslation {
  id     String @id @default(uuid())
  cityId String
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  locale String // Например: "en", "fr", "de"
  name   String
}

model Route {
  id               String                 @id @default(uuid())
  inRoute          String
  toRoute          String
  cityId           String
  popularRoute     Boolean?
  imageUrl         String
  city             City                   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  pointsGoogleMap  Json
  description      String
  price            Float?
  transferCars     TransferCarsOnRoutes[]
  RouteTranslation RouteTranslation[]
}

model RouteTranslation {
  id          String @id @default(uuid())
  routeId     String
  locale      String // Например, 'en' или 'ru'
  inRoute     String
  toRoute     String
  description String
  route       Route  @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, locale]) // Гарантирует, что для каждой локали будет только один перевод
}

model TransferCars {
  id                      String                    @id @default(uuid())
  name                    String
  imageUrl                String
  cars                    String
  qtyPerson               Int
  qtyBags                 Int
  price                   Float
  routes                  TransferCarsOnRoutes[]
  TransferCarsTranslation TransferCarsTranslation[]
}

model TransferCarsTranslation {
  id            String       @id @default(uuid())
  transferCarId String
  transferCar   TransferCars @relation(fields: [transferCarId], references: [id], onDelete: Cascade)
  locale        String // Например, "en", "fr", "de"
  name          String
}

model TransferCarsOnRoutes {
  routeId       String
  transferCarId String
  price         Float?
  route         Route        @relation(fields: [routeId], references: [id], onDelete: Cascade)
  transferCar   TransferCars @relation(fields: [transferCarId], references: [id], onDelete: Cascade)

  @@id([routeId, transferCarId]) // Композитный ключ для связи
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          ROLE
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ROLE {
  ADMIN
  USER
}
