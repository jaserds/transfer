import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import { Metadata } from 'next';
import "./globals.css";
import { Rubik, Open_Sans } from 'next/font/google';
import { AppProviders } from './_providers/app-providers';
import { Toaster } from 'sonner';

export const metadata: Metadata = {
    title: "Трансфер",
    description: "Generated by create next app",
};


const rubik = Rubik({
    subsets: ['latin'],
    weight: ["300", "400", "500", "700", "900"],
    variable: "--font-rubik",
});
const openSans = Open_Sans({ subsets: ['latin'], weight: ["300", "400", "600", "700"] });

export default async function LocaleLayout({
    children,
    params
}: {
    children: React.ReactNode;
    params: Promise<{ locale: string }>;
}) {
    // Ensure that the incoming `locale` is valid
    const { locale } = await params;
    if (!routing.locales.includes(locale as 'ru' | 'en')) {
        notFound();
    }

    // Providing all messages to the client
    // side is the easiest way to get started
    const messages = await getMessages();

    return (

        <html lang={locale}>
            <body className={`${rubik.className} ${openSans.className}`}>

                <NextIntlClientProvider messages={messages}>
                    <AppProviders >
                        {children}
                        <Toaster />
                    </AppProviders>
                </NextIntlClientProvider>

            </body>
        </html>

    );
}