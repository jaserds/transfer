import { NextRequest, NextResponse } from "next/server";

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

export async function POST(req: NextRequest) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        const { name, phone, message } = await req.json();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        const text = `üì© *–í–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!* \nüë§ –ò–º—è: ${name} \nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone} \nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API
        const response = await fetch(TELEGRAM_API_URL, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: text,
                parse_mode: "Markdown", // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            }),
        });

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ Telegram API
        const result = await response.json();

        if (!result.ok) {
            throw new Error("Error while sending the request to Telegram");
        }

        return NextResponse.json({ success: true, message: "Request successfully submitted!" });
    } catch (error) {
        console.error("Error:", error);
        return NextResponse.json({ success: false, message: "Error while submitting the request" }, { status: 500 });
    }
}
